# from sgp4.api import Satrec, jday
# import numpy as np
# from datetime import datetime
# import plotly.express as px
#
# # Function to convert ECI to LLA (simplified, approximate)
# def eci_to_lla(r, gst):
#     x, y, z = r
#     a = 6378.137  # Earth's semi-major axis in km
#     e2 = 0.08181919**2  # Square of Earth's eccentricity
#
#     # Longitude calculation
#     lon = np.arctan2(y, x) - np.deg2rad(gst)
#
#     # Latitude calculation (iterative solution)
#     p = np.sqrt(x**2 + y**2)
#     lat = np.arctan2(z, p * (1 - e2))
#     for _ in range(5):
#         sin_lat = np.sin(lat)
#         lat = np.arctan2(z + e2 * a * sin_lat, p)
#
#     # Altitude calculation
#     sin_lat = np.sin(lat)
#     N = a / np.sqrt(1 - e2 * sin_lat**2)
#     alt = p / np.cos(lat) - N
#
#     # Convert radians to degrees
#     lat = np.degrees(lat)
#     lon = np.degrees(lon)
#
#     return lat, lon, alt
#
# # List of TLEs for multiple satellites (add more TLEs as needed)
# tle_list = [
#     ("1 25544U 98067A   20357.73333202  .00001264  00000-0  29611-4 0  9993",
#      "2 25544  51.6450  61.5860 0002686  73.8743  54.5272 15.48947260260233"),  # ISS
#     ("1 43017U 17073A   20357.73427318  .00000042  00000-0  00000-0 0  9991",
#      "2 43017  53.0537 241.3127 0002602  55.2717 304.8218 15.06330636235390"),  # STARLINK-1015
#     # Add more TLEs here...
# ]
#
# # Initialize a list to hold satellite positions
# satellite_positions = []
#
# # Get the current time and convert it to Julian date
# now = datetime.utcnow()
# jd, fr = jday(now.year, now.month, now.day, now.hour, now.minute, now.second)
#
# # Compute positions for each satellite
# for tle in tle_list:
#     satellite = Satrec.twoline2rv(tle[0], tle[1])
#     e, r, v = satellite.sgp4(jd, fr)
#
#     if e == 0:  # e == 0 indicates a successful computation
#         # Compute Greenwich Sidereal Time (GST)
#         gst = (jd + fr - 2451545.0) / 36525.0 * 360.0
#         gst %= 360.0
#
#         # Convert ECI to Latitude, Longitude, and Altitude
#         lat, lon, alt = eci_to_lla(r, gst)
#         satellite_positions.append((lat, lon, alt))
#
# # Extract latitude, longitude, and altitude for plotting
# lats, lons, alts = zip(*satellite_positions)
#
# # Plot the globe with satellite positions
# fig = px.scatter_geo(lat=lats, lon=lons,
#                      hover_name=[f"Satellite {i+1}" for i in range(len(lats))],
#                      projection="orthographic")
#
# fig.update_layout(
#     title="Positions of Multiple Satellites on the Globe",
#     geo=dict(
#         showland=True,
#         showcountries=True,
#         showocean=True,
#         landcolor="rgb(243, 243, 243)",
#         oceancolor="rgb(204, 204, 204)",
#         projection=dict(type="orthographic"),
#         showlakes=True,
#         lakecolor="rgb(255, 255, 255)"
#     )
# )
#
# fig.show()
#